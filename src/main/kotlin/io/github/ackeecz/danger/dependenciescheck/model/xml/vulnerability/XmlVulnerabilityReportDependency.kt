package io.github.ackeecz.danger.dependenciescheck.model.xml.vulnerability

import com.fasterxml.jackson.annotation.JsonIgnoreProperties
import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty
import io.github.ackeecz.danger.dependenciescheck.model.ArtifactId
import io.github.ackeecz.danger.dependenciescheck.model.DependencyName
import io.github.ackeecz.danger.dependenciescheck.model.GroupId
import io.github.ackeecz.danger.dependenciescheck.model.Version
import io.github.ackeecz.danger.dependenciescheck.model.vulnerability.Vulnerability
import io.github.ackeecz.danger.dependenciescheck.model.vulnerability.VulnerableDependency

@JsonIgnoreProperties(ignoreUnknown = true)
internal data class XmlVulnerabilityReportDependency(
    @field:JacksonXmlProperty(localName = "fileName")
    val fileName: String,
    @field:JacksonXmlProperty(localName = "filePath")
    val filePath: String,
    @field:JacksonXmlProperty(localName = "vulnerabilities")
    val vulnerabilities: List<XmlVulnerability> = emptyList(),
) {

    private val dependencyName = parseDependencyName(fileName = fileName, filePath = filePath)

    private fun parseDependencyName(fileName: String, filePath: String): DependencyName {
        val splitFilePath = filePath.split("/")

        val separators = listOf(":", " ")
        val indexOfArchiveFileName = separators.firstNotNullOfOrNull { separator ->
            val archiveFileName = fileName.split(separator)[0]
            splitFilePath.indexOf(archiveFileName).takeUnless { it == -1 }
        } ?: throw UnsupportedSeparatorException(fileName)

        val groupId = GroupId(splitFilePath[indexOfArchiveFileName - 4])
        val artefactId = ArtifactId(splitFilePath[indexOfArchiveFileName - 3])
        val version = Version(splitFilePath[indexOfArchiveFileName - 2])

        return DependencyName(groupId, artefactId, version)
    }

    fun toVulnerableDependency() = VulnerableDependency(
        name = dependencyName,
        vulnerabilities = vulnerabilities.map { Vulnerability(it.name) },
    )
}

internal class UnsupportedSeparatorException(fileName: String) : Exception() {

    override val message = "fileName \"$fileName\" of vulnerable dependency contains unsupported separator and the " +
        "dependency name can't be properly parsed"
}
